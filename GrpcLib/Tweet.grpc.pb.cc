// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Tweet.proto

#include "Tweet.pb.h"
#include "Tweet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* TweetService_method_names[] = {
  "/proto.TweetService/Tweet",
  "/proto.TweetService/Follow",
  "/proto.TweetService/Show",
  "/proto.TweetService/Login",
  "/proto.TweetService/Logout",
  "/proto.TweetService/Register",
};

std::unique_ptr< TweetService::Stub> TweetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TweetService::Stub> stub(new TweetService::Stub(channel));
  return stub;
}

TweetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Tweet_(TweetService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(TweetService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(TweetService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(TweetService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(TweetService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(TweetService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TweetService::Stub::Tweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::proto::TweetOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tweet_, context, request, response);
}

void TweetService::Stub::experimental_async::Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tweet_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tweet_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tweet_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tweet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::TweetOut>* TweetService::Stub::AsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::TweetOut>::Create(channel_.get(), cq, rpcmethod_Tweet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::TweetOut>* TweetService::Stub::PrepareAsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::TweetOut>::Create(channel_.get(), cq, rpcmethod_Tweet_, context, request, false);
}

::grpc::Status TweetService::Stub::Follow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::proto::FollowOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void TweetService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::FollowOut>* TweetService::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::FollowOut>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::FollowOut>* TweetService::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::FollowOut>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::Status TweetService::Stub::Show(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::proto::ShowOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Show_, context, request, response);
}

void TweetService::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowOut>* TweetService::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::ShowOut>::Create(channel_.get(), cq, rpcmethod_Show_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowOut>* TweetService::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::ShowOut>::Create(channel_.get(), cq, rpcmethod_Show_, context, request, false);
}

::grpc::Status TweetService::Stub::Login(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::proto::LoginOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void TweetService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::LoginOut>* TweetService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::LoginOut>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::LoginOut>* TweetService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::LoginOut>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status TweetService::Stub::Logout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::proto::LogoutOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void TweetService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>* TweetService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::LogoutOut>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>* TweetService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::LogoutOut>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status TweetService::Stub::Register(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::proto::RegisterOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void TweetService::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void TweetService::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

void TweetService::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>* TweetService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::RegisterOut>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>* TweetService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::RegisterOut>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

TweetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::TweetIn, ::proto::TweetOut>(
          std::mem_fn(&TweetService::Service::Tweet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::FollowIn, ::proto::FollowOut>(
          std::mem_fn(&TweetService::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::ShowIn, ::proto::ShowOut>(
          std::mem_fn(&TweetService::Service::Show), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::LoginIn, ::proto::LoginOut>(
          std::mem_fn(&TweetService::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::LogoutIn, ::proto::LogoutOut>(
          std::mem_fn(&TweetService::Service::Logout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TweetService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TweetService::Service, ::proto::RegisterIn, ::proto::RegisterOut>(
          std::mem_fn(&TweetService::Service::Register), this)));
}

TweetService::Service::~Service() {
}

::grpc::Status TweetService::Service::Tweet(::grpc::ServerContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TweetService::Service::Follow(::grpc::ServerContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TweetService::Service::Show(::grpc::ServerContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TweetService::Service::Login(::grpc::ServerContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TweetService::Service::Logout(::grpc::ServerContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TweetService::Service::Register(::grpc::ServerContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

