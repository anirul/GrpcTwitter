// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Tweet.proto

#include "Tweet.pb.h"
#include "Tweet.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace proto {

class MockTweetServiceStub : public TweetService::StubInterface {
 public:
  MOCK_METHOD3(Tweet, ::grpc::Status(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::proto::TweetOut* response));
  MOCK_METHOD3(AsyncTweetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>*(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncTweetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>*(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Follow, ::grpc::Status(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::proto::FollowOut* response));
  MOCK_METHOD3(AsyncFollowRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>*(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFollowRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>*(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Show, ::grpc::Status(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::proto::ShowOut* response));
  MOCK_METHOD3(AsyncShowRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>*(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncShowRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>*(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Login, ::grpc::Status(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::proto::LoginOut* response));
  MOCK_METHOD3(AsyncLoginRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>*(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLoginRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>*(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Logout, ::grpc::Status(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::proto::LogoutOut* response));
  MOCK_METHOD3(AsyncLogoutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>*(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLogoutRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>*(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Register, ::grpc::Status(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::proto::RegisterOut* response));
  MOCK_METHOD3(AsyncRegisterRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>*(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRegisterRaw, ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>*(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq));
};

} // namespace proto

