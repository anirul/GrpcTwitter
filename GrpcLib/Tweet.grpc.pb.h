// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Tweet.proto
#ifndef GRPC_Tweet_2eproto__INCLUDED
#define GRPC_Tweet_2eproto__INCLUDED

#include "Tweet.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {

class TweetService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.TweetService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Tweet a message.
    virtual ::grpc::Status Tweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::proto::TweetOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>> AsyncTweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>>(AsyncTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>> PrepareAsyncTweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>>(PrepareAsyncTweetRaw(context, request, cq));
    }
    // Follow a user.
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::proto::FollowOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>> AsyncFollow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    // Show tweet from a followy or yourself.
    virtual ::grpc::Status Show(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::proto::ShowOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>> AsyncShow(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>>(AsyncShowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>> PrepareAsyncShow(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>>(PrepareAsyncShowRaw(context, request, cq));
    }
    // Login to twitter.
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::proto::LoginOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>> AsyncLogin(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // Logout the current user.
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::proto::LogoutOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>> AsyncLogout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    // Register a new user.
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::proto::RegisterOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>> AsyncRegister(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Tweet a message.
      virtual void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Follow a user.
      virtual void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Show tweet from a followy or yourself.
      virtual void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Login to twitter.
      virtual void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Logout the current user.
      virtual void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Register a new user.
      virtual void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>* AsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::TweetOut>* PrepareAsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>* AsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::FollowOut>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>* AsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::ShowOut>* PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>* AsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::LoginOut>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::LogoutOut>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::RegisterOut>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Tweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::proto::TweetOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>> AsyncTweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>>(AsyncTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>> PrepareAsyncTweet(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>>(PrepareAsyncTweetRaw(context, request, cq));
    }
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::proto::FollowOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>> AsyncFollow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    ::grpc::Status Show(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::proto::ShowOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>> AsyncShow(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>>(AsyncShowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>> PrepareAsyncShow(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>>(PrepareAsyncShowRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::proto::LoginOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>> AsyncLogin(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::proto::LogoutOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>> AsyncLogout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::proto::RegisterOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>> AsyncRegister(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)>) override;
      void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tweet(::grpc::ClientContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tweet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::TweetOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)>) override;
      void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Follow(::grpc::ClientContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::FollowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)>) override;
      void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Show(::grpc::ClientContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::ShowOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LoginOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::LogoutOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Register(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::RegisterOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>* AsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::TweetOut>* PrepareAsyncTweetRaw(::grpc::ClientContext* context, const ::proto::TweetIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>* AsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::FollowOut>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::proto::FollowIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>* AsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::ShowOut>* PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::proto::ShowIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>* AsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::LoginOut>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::proto::LoginIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::LogoutOut>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::proto::LogoutIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::RegisterOut>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::proto::RegisterIn& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Tweet_;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_Show_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Tweet a message.
    virtual ::grpc::Status Tweet(::grpc::ServerContext* context, const ::proto::TweetIn* request, ::proto::TweetOut* response);
    // Follow a user.
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::proto::FollowIn* request, ::proto::FollowOut* response);
    // Show tweet from a followy or yourself.
    virtual ::grpc::Status Show(::grpc::ServerContext* context, const ::proto::ShowIn* request, ::proto::ShowOut* response);
    // Login to twitter.
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::proto::LoginIn* request, ::proto::LoginOut* response);
    // Logout the current user.
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response);
    // Register a new user.
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tweet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTweet(::grpc::ServerContext* context, ::proto::TweetIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::TweetOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::proto::FollowIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::FollowOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Show() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShow(::grpc::ServerContext* context, ::proto::ShowIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::ShowOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::proto::LoginIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::LoginOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::proto::LogoutIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::LogoutOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::proto::RegisterIn* request, ::grpc::ServerAsyncResponseWriter< ::proto::RegisterOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Tweet<WithAsyncMethod_Follow<WithAsyncMethod_Show<WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_Register<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tweet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::TweetIn, ::proto::TweetOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::TweetIn* request, ::proto::TweetOut* response) { return this->Tweet(context, request, response); }));}
    void SetMessageAllocatorFor_Tweet(
        ::grpc::experimental::MessageAllocator< ::proto::TweetIn, ::proto::TweetOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::TweetIn, ::proto::TweetOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tweet(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tweet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Follow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::FollowIn, ::proto::FollowOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::FollowIn* request, ::proto::FollowOut* response) { return this->Follow(context, request, response); }));}
    void SetMessageAllocatorFor_Follow(
        ::grpc::experimental::MessageAllocator< ::proto::FollowIn, ::proto::FollowOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::FollowIn, ::proto::FollowOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Follow(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Follow(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Show() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::ShowIn, ::proto::ShowOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::ShowIn* request, ::proto::ShowOut* response) { return this->Show(context, request, response); }));}
    void SetMessageAllocatorFor_Show(
        ::grpc::experimental::MessageAllocator< ::proto::ShowIn, ::proto::ShowOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::ShowIn, ::proto::ShowOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Show(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Show(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::LoginIn, ::proto::LoginOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::LoginIn* request, ::proto::LoginOut* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::proto::LoginIn, ::proto::LoginOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::LoginIn, ::proto::LoginOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::LogoutIn, ::proto::LogoutOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::LogoutIn* request, ::proto::LogoutOut* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::proto::LogoutIn, ::proto::LogoutOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::LogoutIn, ::proto::LogoutOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::RegisterIn, ::proto::RegisterOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::RegisterIn* request, ::proto::RegisterOut* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::experimental::MessageAllocator< ::proto::RegisterIn, ::proto::RegisterOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::RegisterIn, ::proto::RegisterOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Tweet<ExperimentalWithCallbackMethod_Follow<ExperimentalWithCallbackMethod_Show<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_Register<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Tweet<ExperimentalWithCallbackMethod_Follow<ExperimentalWithCallbackMethod_Show<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_Register<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tweet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Show() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tweet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTweet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Follow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Show() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tweet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tweet(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tweet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tweet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Follow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Follow(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Follow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Follow(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Show() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Show(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Show(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Show(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Register() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Register(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tweet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::TweetIn, ::proto::TweetOut>(std::bind(&WithStreamedUnaryMethod_Tweet<BaseClass>::StreamedTweet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Tweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tweet(::grpc::ServerContext* /*context*/, const ::proto::TweetIn* /*request*/, ::proto::TweetOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTweet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::TweetIn,::proto::TweetOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::FollowIn, ::proto::FollowOut>(std::bind(&WithStreamedUnaryMethod_Follow<BaseClass>::StreamedFollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::proto::FollowIn* /*request*/, ::proto::FollowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::FollowIn,::proto::FollowOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Show() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::ShowIn, ::proto::ShowOut>(std::bind(&WithStreamedUnaryMethod_Show<BaseClass>::StreamedShow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Show(::grpc::ServerContext* /*context*/, const ::proto::ShowIn* /*request*/, ::proto::ShowOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::ShowIn,::proto::ShowOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::LoginIn, ::proto::LoginOut>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::proto::LoginIn* /*request*/, ::proto::LoginOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::LoginIn,::proto::LoginOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::LogoutIn, ::proto::LogoutOut>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::proto::LogoutIn* /*request*/, ::proto::LogoutOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::LogoutIn,::proto::LogoutOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::RegisterIn, ::proto::RegisterOut>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::proto::RegisterIn* /*request*/, ::proto::RegisterOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::RegisterIn,::proto::RegisterOut>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Tweet<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Show<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Register<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Tweet<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Show<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Register<Service > > > > > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_Tweet_2eproto__INCLUDED
